{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0424\u043e\u0440\u043c\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u041a\u043b\u0438\u0435\u043d\u0442\u044b - \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b_\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 - \u0410\u0433\u0435\u043d\u0442\u044b - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 - \u0412\u044b\u043f\u043b\u0430\u0442\u044b - \u041f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f - \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b \u041f\u0440\u0435\u0442\u0435\u043d\u0437\u0438\u0438","title":"Home"},{"location":"#welcome-to-mkdocs","text":"","title":"Welcome to MkDocs"},{"location":"#no1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"#no2","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0424\u043e\u0440\u043c\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"#-","text":"","title":"- \u041a\u043b\u0438\u0435\u043d\u0442\u044b"},{"location":"#-_","text":"","title":"- \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b_\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"},{"location":"#-_1","text":"","title":"- \u0410\u0433\u0435\u043d\u0442\u044b"},{"location":"#-_2","text":"","title":"- \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"#-_3","text":"","title":"- \u0412\u044b\u043f\u043b\u0430\u0442\u044b"},{"location":"#-_4","text":"","title":"- \u041f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f"},{"location":"#-_5","text":"\u041f\u0440\u0435\u0442\u0435\u043d\u0437\u0438\u0438","title":"- \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b"},{"location":"lab1/task_1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: server.py import socket def start_udp_server(): serv_address = ('localhost', 8080) with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock: sock.bind(serv_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:', serv_address) while True: data, cl_address = sock.recvfrom(1024) print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', data.decode()) response = 'Hello, client!' sock.sendto(response.encode(), cl_address) print('\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443:', response) if __name__ == \"__main__\": start_udp_server() client.py import socket def communicate_with_server(): serv_address = ('localhost', 8080) message = 'Hello, server!' with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock: sock.sendto(message.encode(), serv_address) print(f'Message sent to server: {message}') data, _ = sock.recvfrom(1024) print(f'Received message from server: {data.decode()}') if __name__ == \"__main__\": communicate_with_server() \u0414\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u0433\u043e\u0442\u043e\u0432 \u0441\u043b\u0443\u0448\u0430\u0442\u044c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. UDP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c UDP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_DGRAM)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task_1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1:"},{"location":"lab1/task_1/#_1","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/task_1/#serverpy","text":"import socket def start_udp_server(): serv_address = ('localhost', 8080) with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock: sock.bind(serv_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:', serv_address) while True: data, cl_address = sock.recvfrom(1024) print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', data.decode()) response = 'Hello, client!' sock.sendto(response.encode(), cl_address) print('\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443:', response) if __name__ == \"__main__\": start_udp_server()","title":"server.py"},{"location":"lab1/task_1/#clientpy","text":"import socket def communicate_with_server(): serv_address = ('localhost', 8080) message = 'Hello, server!' with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock: sock.sendto(message.encode(), serv_address) print(f'Message sent to server: {message}') data, _ = sock.recvfrom(1024) print(f'Received message from server: {data.decode()}') if __name__ == \"__main__\": communicate_with_server() \u0414\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u0433\u043e\u0442\u043e\u0432 \u0441\u043b\u0443\u0448\u0430\u0442\u044c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. UDP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c UDP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_DGRAM)","title":"client.py"},{"location":"lab1/task_2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: server.py import socket import math def calculate_pythagorean(a, b): return math.sqrt(a ** 2 + b ** 2) def solve_quadratic(a, b, c): discriminant = b ** 2 - 4 * a * c if discriminant < 0: return \"No real roots\" elif discriminant == 0: x = -b / (2 * a) return x else: x1 = (-b + math.sqrt(discriminant)) / (2 * a) x2 = (-b - math.sqrt(discriminant)) / (2 * a) return x1, x2 def calculate_trapezoid_area(a, b, h): return ((a + b) / 2) * h def calculate_parallelogram_area(base, height): return base * height def handle_client_request(data): operation, *args = data.split() args = list(map(float, args)) if operation == 'pythagorean': return calculate_pythagorean(*args) elif operation == 'quadratic': return solve_quadratic(*args) elif operation == 'trapezoid_area': return calculate_trapezoid_area(*args) elif operation == 'parallelogram_area': return calculate_parallelogram_area(*args) else: return \"Invalid operation\" def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8080)) server_socket.listen(1) print(\"Server listening on port 8080...\") while True: conn, addr = server_socket.accept() print(f\"Connected by {addr}\") data = conn.recv(1024).decode('utf-8') if not data: break result = handle_client_request(data) conn.sendall(str(result).encode('utf-8')) conn.close() if __name__ == \"__main__\": start_server() client.py import socket def get_input(): operation = input(\"Enter operation (pythagorean, quadratic, trapezoid_area, parallelogram_area): \").strip() if operation == 'pythagorean': a = float(input(\"Enter side a: \")) b = float(input(\"Enter side b: \")) return f\"{operation} {a} {b}\" elif operation == 'quadratic': a = float(input(\"Enter coefficient a: \")) b = float(input(\"Enter coefficient b: \")) c = float(input(\"Enter coefficient c: \")) return f\"{operation} {a} {b} {c}\" elif operation == 'trapezoid_area': a = float(input(\"Enter base1 (a): \")) b = float(input(\"Enter base2 (b): \")) h = float(input(\"Enter height (h): \")) return f\"{operation} {a} {b} {h}\" elif operation == 'parallelogram_area': base = float(input(\"Enter base: \")) height = float(input(\"Enter height: \")) return f\"{operation} {base} {height}\" else: return \"Invalid operation\" def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 8080)) request = get_input() client_socket.sendall(request.encode('utf-8')) response = client_socket.recv(1024) print(f\"Result: {response.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": start_client() \u0414\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u0433\u043e\u0442\u043e\u0432 \u0441\u043b\u0443\u0448\u0430\u0442\u044c, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u0438\u0441\u043a \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0432 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u043e\u0440\u043e\u043d. TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c TCP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_STREAM)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task_2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2:"},{"location":"lab1/task_2/#_1","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/task_2/#serverpy","text":"import socket import math def calculate_pythagorean(a, b): return math.sqrt(a ** 2 + b ** 2) def solve_quadratic(a, b, c): discriminant = b ** 2 - 4 * a * c if discriminant < 0: return \"No real roots\" elif discriminant == 0: x = -b / (2 * a) return x else: x1 = (-b + math.sqrt(discriminant)) / (2 * a) x2 = (-b - math.sqrt(discriminant)) / (2 * a) return x1, x2 def calculate_trapezoid_area(a, b, h): return ((a + b) / 2) * h def calculate_parallelogram_area(base, height): return base * height def handle_client_request(data): operation, *args = data.split() args = list(map(float, args)) if operation == 'pythagorean': return calculate_pythagorean(*args) elif operation == 'quadratic': return solve_quadratic(*args) elif operation == 'trapezoid_area': return calculate_trapezoid_area(*args) elif operation == 'parallelogram_area': return calculate_parallelogram_area(*args) else: return \"Invalid operation\" def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8080)) server_socket.listen(1) print(\"Server listening on port 8080...\") while True: conn, addr = server_socket.accept() print(f\"Connected by {addr}\") data = conn.recv(1024).decode('utf-8') if not data: break result = handle_client_request(data) conn.sendall(str(result).encode('utf-8')) conn.close() if __name__ == \"__main__\": start_server()","title":"server.py"},{"location":"lab1/task_2/#clientpy","text":"import socket def get_input(): operation = input(\"Enter operation (pythagorean, quadratic, trapezoid_area, parallelogram_area): \").strip() if operation == 'pythagorean': a = float(input(\"Enter side a: \")) b = float(input(\"Enter side b: \")) return f\"{operation} {a} {b}\" elif operation == 'quadratic': a = float(input(\"Enter coefficient a: \")) b = float(input(\"Enter coefficient b: \")) c = float(input(\"Enter coefficient c: \")) return f\"{operation} {a} {b} {c}\" elif operation == 'trapezoid_area': a = float(input(\"Enter base1 (a): \")) b = float(input(\"Enter base2 (b): \")) h = float(input(\"Enter height (h): \")) return f\"{operation} {a} {b} {h}\" elif operation == 'parallelogram_area': base = float(input(\"Enter base: \")) height = float(input(\"Enter height: \")) return f\"{operation} {base} {height}\" else: return \"Invalid operation\" def start_client(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 8080)) request = get_input() client_socket.sendall(request.encode('utf-8')) response = client_socket.recv(1024) print(f\"Result: {response.decode('utf-8')}\") client_socket.close() if __name__ == \"__main__\": start_client() \u0414\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u0433\u043e\u0442\u043e\u0432 \u0441\u043b\u0443\u0448\u0430\u0442\u044c, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u0438\u0441\u043a \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0432 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u043e\u0440\u043e\u043d. TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c TCP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_STREAM)","title":"client.py"},{"location":"lab1/task_3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: server.py import socket def start_http_server(): host = 'localhost' port = 8080 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"Server listening on {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"Connection from {client_address}\") request_data = client_socket.recv(1024).decode('utf-8') print(f\"Request received:\\n{request_data}\") with open(\"index.html\", \"r\") as file: html_content = file.read() http_response = ( \"HTTP/1.1 200 OK\\n\" \"Content-Type: text/html\\n\" \"Content-Length: {}\\n\" \"Connection: close\\n\\n\" \"{}\".format(len(html_content), html_content) ) client_socket.sendall(http_response.encode('utf-8')) client_socket.close() print(f\"Connection with {client_address} closed\") if __name__ == \"__main__\": start_http_server() \u0421\u043e\u0437\u0434\u0430\u0435\u043c HTML-\u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0442\u0430\u0439\u0442\u0430, \u0437\u0430\u0442\u0435\u043c \u043f\u0438\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430. \u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0430\u0439\u0442\u0430, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:8080","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task_3/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3:"},{"location":"lab1/task_3/#_1","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/task_3/#serverpy","text":"import socket def start_http_server(): host = 'localhost' port = 8080 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"Server listening on {host}:{port}...\") while True: client_socket, client_address = server_socket.accept() print(f\"Connection from {client_address}\") request_data = client_socket.recv(1024).decode('utf-8') print(f\"Request received:\\n{request_data}\") with open(\"index.html\", \"r\") as file: html_content = file.read() http_response = ( \"HTTP/1.1 200 OK\\n\" \"Content-Type: text/html\\n\" \"Content-Length: {}\\n\" \"Connection: close\\n\\n\" \"{}\".format(len(html_content), html_content) ) client_socket.sendall(http_response.encode('utf-8')) client_socket.close() print(f\"Connection with {client_address} closed\") if __name__ == \"__main__\": start_http_server() \u0421\u043e\u0437\u0434\u0430\u0435\u043c HTML-\u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u0430\u0442\u0430\u0439\u0442\u0430, \u0437\u0430\u0442\u0435\u043c \u043f\u0438\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0439\u0442\u0430. \u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0430\u0439\u0442\u0430, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:8080","title":"server.py"},{"location":"lab1/task_4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: server.py import socket import threading SERVER_HOST = 'localhost' SERVER_PORT = 8080 ENCODING = 'utf-8' server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((SERVER_HOST, SERVER_PORT)) server.listen() clients = [] nicknames = [] def broadcast(message): for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) broadcast(message) except OSError: # Handles socket errors if client in clients: disconnect_client(client) break def disconnect_client(client): index = clients.index(client) clients.remove(client) client.close() nickname = nicknames[index] nicknames.remove(nickname) broadcast(f'{nickname} left!'.encode(ENCODING)) def receive(): while True: client, address = server.accept() print(f\"Connected with {str(address)}\") client.send('margo'.encode(ENCODING)) nickname = client.recv(1024).decode(ENCODING) nicknames.append(nickname) clients.append(client) print(f\"Nickname is {nickname}\") broadcast(f\"{nickname} joined!\".encode(ENCODING)) client.send('Connected to server!'.encode(ENCODING)) thread = threading.Thread(target=handle, args=(client,)) thread.start() if __name__ == \"__main__\": print(f\"Server running on {SERVER_HOST}:{SERVER_PORT}\") receive() client.py import socket import threading SERVER_HOST = '127.0.0.1' SERVER_PORT = 8080 ENCODING = 'utf-8' def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode(ENCODING) if message == 'margo': client_socket.send(nickname.encode(ENCODING)) else: print(message) except OSError: print(\"An error occurred while receiving data!\") client_socket.close() break def send_messages(client_socket): while True: message = f'{nickname}: {input(\"\")}' client_socket.send(message.encode(ENCODING)) if __name__ == \"__main__\": nickname = input(\"Choose your nickname: \") client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: client.connect((SERVER_HOST, SERVER_PORT)) except ConnectionError: print(\"Failed to connect to the server.\") exit() receive_thread = threading.Thread(target=receive_messages, args=(client,)) receive_thread.start() write_thread = threading.Thread(target=send_messages, args=(client,)) write_thread.start() TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c TCP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_STREAM) \u0412 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0447\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438: \u043f\u0440\u0438\u0451\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u0435\u0441\u0435\u0434\u0435. \u0415\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0436\u0435\u043b\u0430\u0435\u0442 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430, \u0442\u043e \u044d\u0442\u0430 \u043d\u043e\u0432\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430 \u0438 \u0435\u0433\u043e \u0441\u0432\u044f\u0437\u044c \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f. \u0412 \u0438\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0442\u043e \u043e\u043d\u043e \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0447\u0443\u0436\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u0441\u0432\u044f\u0437\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task_4/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4:"},{"location":"lab1/task_4/#_1","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/task_4/#serverpy","text":"import socket import threading SERVER_HOST = 'localhost' SERVER_PORT = 8080 ENCODING = 'utf-8' server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((SERVER_HOST, SERVER_PORT)) server.listen() clients = [] nicknames = [] def broadcast(message): for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) broadcast(message) except OSError: # Handles socket errors if client in clients: disconnect_client(client) break def disconnect_client(client): index = clients.index(client) clients.remove(client) client.close() nickname = nicknames[index] nicknames.remove(nickname) broadcast(f'{nickname} left!'.encode(ENCODING)) def receive(): while True: client, address = server.accept() print(f\"Connected with {str(address)}\") client.send('margo'.encode(ENCODING)) nickname = client.recv(1024).decode(ENCODING) nicknames.append(nickname) clients.append(client) print(f\"Nickname is {nickname}\") broadcast(f\"{nickname} joined!\".encode(ENCODING)) client.send('Connected to server!'.encode(ENCODING)) thread = threading.Thread(target=handle, args=(client,)) thread.start() if __name__ == \"__main__\": print(f\"Server running on {SERVER_HOST}:{SERVER_PORT}\") receive()","title":"server.py"},{"location":"lab1/task_4/#clientpy","text":"import socket import threading SERVER_HOST = '127.0.0.1' SERVER_PORT = 8080 ENCODING = 'utf-8' def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode(ENCODING) if message == 'margo': client_socket.send(nickname.encode(ENCODING)) else: print(message) except OSError: print(\"An error occurred while receiving data!\") client_socket.close() break def send_messages(client_socket): while True: message = f'{nickname}: {input(\"\")}' client_socket.send(message.encode(ENCODING)) if __name__ == \"__main__\": nickname = input(\"Choose your nickname: \") client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: client.connect((SERVER_HOST, SERVER_PORT)) except ConnectionError: print(\"Failed to connect to the server.\") exit() receive_thread = threading.Thread(target=receive_messages, args=(client,)) receive_thread.start() write_thread = threading.Thread(target=send_messages, args=(client,)) write_thread.start() TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c TCP-socket \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 socket.socket(socket.AF_INET, socket.SOCK_STREAM) \u0412 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0447\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438: \u043f\u0440\u0438\u0451\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u0435\u0441\u0435\u0434\u0435. \u0415\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0436\u0435\u043b\u0430\u0435\u0442 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430, \u0442\u043e \u044d\u0442\u0430 \u043d\u043e\u0432\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0447\u0430\u0442\u0430 \u0438 \u0435\u0433\u043e \u0441\u0432\u044f\u0437\u044c \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f. \u0412 \u0438\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0442\u043e \u043e\u043d\u043e \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0447\u0443\u0436\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u0441\u0432\u044f\u0437\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.","title":"client.py"},{"location":"lab1/task_5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: server.py import socket def parse_request(data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grade = [] def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('index.html', encoding='utf-8') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 8080 myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 html-\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0438\u0437 3 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 threading \u0438\u0437 4 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0445\u043e\u0441\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041f\u043e\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0441\u043e\u043e\u0431\u0449\u0430\u044f \u043e\u0431 \u0438\u0445 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435, \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043d\u043e\u0433\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 client_handler , \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041f\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0435 GET \u0441\u0435\u0440\u0432\u0435\u0440 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438, \u043f\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0435 POST \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u044b \u043f\u0440\u0435\u0434\u043c\u0435\u0442-\u043e\u0446\u0435\u043d\u043a\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u043c\u0435\u0442\u043e\u043a. \u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0430\u0439\u0442\u0430, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:8080","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task_5/#5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5:"},{"location":"lab1/task_5/#_1","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/task_5/#serverpy","text":"import socket def parse_request(data): data_split = data.split('\\r\\n') print(f\"data split : {data_split}\") headers = data_split[0].split() print(f\"Headers : {headers}\") body = data_split[-1] request = dict() if len(headers) == 3: request.update( {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]}) if \"&\" in body: parametre = body.split(\"&\") request.update({\"parametrs\": parametre}) return request else: request.update({\"parametrs\": {}}) return request else: raise Exception(\"Malformed request line\") class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grade = [] def serve_forever(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() while True: client_socket, _ = sock.accept() self.serve_client(client_socket) def serve_client(self, client_socket): data = client_socket.recv(4096).decode('utf-8') request = parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) client_socket.close() def handle_request(self, request): print(request) response = f\"{request['version']} 200 OK\\n\\n\" if request[\"url\"] == \"/\": if request[\"method\"] == \"POST\": self.grade.extend(request[\"parametrs\"]) if request[\"method\"] == \"GET\" or \"POST\": with open('index.html', encoding='utf-8') as f: response += f.read() return response if request[\"url\"] == \"/journal\": response += \"<html><head><title>List grades</title></head><body>\" for s in self.grade: response += f\"<p>{s} </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\": host = 'localhost' port = 8080 myserver = MyHTTPServer(host, port) try: myserver.serve_forever() except KeyboardInterrupt: pass \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 html-\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0438\u0437 3 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 threading \u0438\u0437 4 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0445\u043e\u0441\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041f\u043e\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0441\u043e\u043e\u0431\u0449\u0430\u044f \u043e\u0431 \u0438\u0445 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435, \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043d\u043e\u0433\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 client_handler , \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041f\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0435 GET \u0441\u0435\u0440\u0432\u0435\u0440 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438, \u043f\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0435 POST \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0430\u0440\u044b \u043f\u0440\u0435\u0434\u043c\u0435\u0442-\u043e\u0446\u0435\u043d\u043a\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u043c\u0435\u0442\u043e\u043a. \u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0430\u0439\u0442\u0430, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:8080","title":"server.py"},{"location":"lab2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab2/#_2","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c.","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442:"},{"location":"lab2/forms/","text":"\u0424\u043e\u0440\u043c\u044b \u0414\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u043e\u0440\u043c \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0442\u0443\u0440 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0435 class BookingForm(forms.ModelForm): tour_id = forms.IntegerField(widget=forms.HiddenInput()) def __init__(self, *args, **kwargs): tour_id = kwargs.pop('tour_id', None) super(BookingForm, self).__init__(*args, **kwargs) if tour_id: tour = Tour.objects.get(pk=tour_id) available_dates = [(date, date) for date in tour.available_dates] hotel_categories = [(category, category) for category in tour.hotel_category] self.fields['selected_date'] = forms.ChoiceField( label='\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u0443', choices=available_dates, widget=forms.Select( attrs={'class': 'form-control'})) self.fields['selected_category'] = forms.ChoiceField( label='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', choices=hotel_categories, widget=forms.Select( attrs={'class': 'form-control'})) persons_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0445', widget=forms.NumberInput( attrs={'class': 'form-control'})) children_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439', widget=forms.NumberInput( attrs={'class': 'form-control'})) rooms_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432', widget=forms.NumberInput( attrs={'class': 'form-control'})) def booking(request, tour_id): if not request.user.is_authenticated: return redirect('login') tour = get_object_or_404(Tour, id=tour_id) if request.method == 'POST': form = BookingForm(request.POST) if form.is_valid(): tour_booking = form.save(commit=False) tour_booking.tourist = request.user tour_booking.status = 'W' tour_booking.tour_id = tour.pk tour_booking.save() return redirect('account') else: form = BookingForm(initial={'tour_id': tour_id}, tour_id=tour_id) return render(request, 'booking.html', {'form': form}) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435 \u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ('rating','text') if not request.user.is_authenticated: return redirect('login') tour = get_object_or_404(Tour, pk=tour_id) booking = get_object_or_404(TourBooking, pk=booking_id) if request.method == \"POST\": form = ReviewForm(request.POST) if form.is_valid(): review = form.save(commit=False) review.tourist = request.user review.tour = tour review.booking = booking review.save() return redirect('account') else: form = ReviewForm() return render(request, 'review.html', {'form': form}) \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0414\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430 \u0436\u043a \u0444\u043e\u0440\u043c\u0430, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 def edit_tour(request, booking_id): booking = get_object_or_404(TourBooking, id=booking_id) if request.method == 'POST': form = BookingForm(request.POST, instance=booking) if form.is_valid(): tour_booking = form.save(commit=False) tour_booking.status = 'W' tour_booking.save() return redirect('account') else: form = BookingForm(instance=booking, initial={'tour_id': booking.tour.pk}, tour_id=booking.tour.pk) return render(request, 'edit_tour.html', {'form': form, 'tour': booking})","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab2/forms/#_1","text":"\u0414\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u043e\u0440\u043c","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab2/forms/#_2","text":"\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0442\u0443\u0440 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0435 class BookingForm(forms.ModelForm): tour_id = forms.IntegerField(widget=forms.HiddenInput()) def __init__(self, *args, **kwargs): tour_id = kwargs.pop('tour_id', None) super(BookingForm, self).__init__(*args, **kwargs) if tour_id: tour = Tour.objects.get(pk=tour_id) available_dates = [(date, date) for date in tour.available_dates] hotel_categories = [(category, category) for category in tour.hotel_category] self.fields['selected_date'] = forms.ChoiceField( label='\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u0443', choices=available_dates, widget=forms.Select( attrs={'class': 'form-control'})) self.fields['selected_category'] = forms.ChoiceField( label='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', choices=hotel_categories, widget=forms.Select( attrs={'class': 'form-control'})) persons_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0445', widget=forms.NumberInput( attrs={'class': 'form-control'})) children_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439', widget=forms.NumberInput( attrs={'class': 'form-control'})) rooms_number = forms.IntegerField(label='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432', widget=forms.NumberInput( attrs={'class': 'form-control'})) def booking(request, tour_id): if not request.user.is_authenticated: return redirect('login') tour = get_object_or_404(Tour, id=tour_id) if request.method == 'POST': form = BookingForm(request.POST) if form.is_valid(): tour_booking = form.save(commit=False) tour_booking.tourist = request.user tour_booking.status = 'W' tour_booking.tour_id = tour.pk tour_booking.save() return redirect('account') else: form = BookingForm(initial={'tour_id': tour_id}, tour_id=tour_id) return render(request, 'booking.html', {'form': form})","title":"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"lab2/forms/#_3","text":"\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435 \u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ('rating','text') if not request.user.is_authenticated: return redirect('login') tour = get_object_or_404(Tour, pk=tour_id) booking = get_object_or_404(TourBooking, pk=booking_id) if request.method == \"POST\": form = ReviewForm(request.POST) if form.is_valid(): review = form.save(commit=False) review.tourist = request.user review.tour = tour review.booking = booking review.save() return redirect('account') else: form = ReviewForm() return render(request, 'review.html', {'form': form})","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"lab2/forms/#_4","text":"\u0414\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430 \u0436\u043a \u0444\u043e\u0440\u043c\u0430, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 def edit_tour(request, booking_id): booking = get_object_or_404(TourBooking, id=booking_id) if request.method == 'POST': form = BookingForm(request.POST, instance=booking) if form.is_valid(): tour_booking = form.save(commit=False) tour_booking.status = 'W' tour_booking.save() return redirect('account') else: form = BookingForm(instance=booking, initial={'tour_id': booking.tour.pk}, tour_id=booking.tour.pk) return render(request, 'edit_tour.html', {'form': form, 'tour': booking})","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"lab2/models/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u0414\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u0443\u0440\u0443, \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0430\u043d, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0442\u0440\u0430\u043d \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043f\u0438\u0442\u0430\u043d\u0438\u044f: class Country(models.Model): country_name = models.CharField(max_length=100, verbose_name='\u0421\u0442\u0440\u0430\u043d\u0430') def __str__(self): return self.country_name class Meta: verbose_name = '\u0421\u0442\u0440\u0430\u043d\u0430' verbose_name_plural = '\u0421\u0442\u0440\u0430\u043d\u044b' class FoodType(models.Model): type = models.CharField(max_length=100, verbose_name=\"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\") def __str__(self): return self.type class Meta: verbose_name = \"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\" verbose_name_plural = \"\u0422\u0438\u043f\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f\" \u041c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0430 \u0411\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0430 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0430\u0442\u044b (\u0447\u0442\u043e\u0431\u044b \u0442\u0443\u0440\u0438\u0441\u0442 \u043c\u043e\u0433 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u0443\u044e), \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f, \u0442\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0430\u043d\u0430, \u0433\u043e\u0440\u043e\u0434, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. class Tour(models.Model): name = models.CharField(max_length=200, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430') country = models.ManyToManyField(Country, verbose_name='\u0421\u0442\u0440\u0430\u043d\u0430') city = models.CharField(max_length=200, verbose_name='\u0413\u043e\u0440\u043e\u0434') available_dates = fields.ArrayField(models.DateField(), verbose_name='\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u0430\u0442\u044b', default=list) duration = models.IntegerField(verbose_name='\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') tour_agency = models.CharField(max_length=100, verbose_name=\"\u0422\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e\") food_type = models.ManyToManyField(FoodType, verbose_name=\"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\") hotel_category = fields.ArrayField( models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)]), verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', default=list) description = models.CharField(max_length=1000, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') def __str__(self): return self.name class Meta: verbose_name = '\u0422\u0443\u0440' verbose_name_plural = '\u0422\u0443\u0440\u044b' \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0449\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0445\u0440\u0430\u043d\u044f\u0449\u0430\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: class TourBooking(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440') tourist = models.ForeignKey(Tourist, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440\u0438\u0441\u0442') selected_date = models.DateField(verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430') selected_category = models.IntegerField(verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', validators=[MinValueValidator(1), MaxValueValidator(5)]) persons_number = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0445') children_number = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439') rooms_number = models.IntegerField( validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432') STATUSES = ( ('W', \"\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f\"), ('B', '\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d'), ('C', '\u041e\u0442\u043a\u0430\u0437\u0430\u043d\u043e'), ('D', '\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d') ) status = models.CharField(choices=STATUSES, max_length=100, verbose_name='\u0421\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f') def __str__(self): return self.tour.name class Meta: verbose_name = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435' verbose_name_plural = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f' \u0422\u0430\u043a\u0436\u0435 \u0443 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u0435 \"\u0441\u0442\u0430\u0442\u0443\u0441\", \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0422\u0443\u0440\u0438\u0441\u0442 \u0411\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0435\u0433\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u044f\u0445: class Tourist(AbstractUser): tours = models.ManyToManyField(Tour, through='TourBooking', verbose_name='\u0422\u0443\u0440\u044b', related_name='tourists', blank=True) \u041e\u0442\u0437\u044b\u0432\u044b \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0437\u044b\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435 \u0438 \u0435\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438: class Review(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440') tourist = models.ForeignKey(Tourist, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440\u0438\u0441\u0442') text = models.CharField(max_length=1000, verbose_name='\u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430') rating = models.IntegerField(choices=[(i, str(i)) for i in range(1, 11)], verbose_name='\u041e\u0446\u0435\u043d\u043a\u0430') booking = models.ForeignKey(TourBooking, on_delete=models.CASCADE, verbose_name=\"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\") class Meta: verbose_name = '\u041e\u0442\u0437\u044b\u0432' verbose_name_plural = '\u041e\u0442\u0437\u044b\u0432\u044b'","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab2/models/#_1","text":"\u0414\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u0443\u0440\u0443, \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0430\u043d, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:"},{"location":"lab2/models/#_2","text":"\u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0442\u0440\u0430\u043d \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043f\u0438\u0442\u0430\u043d\u0438\u044f: class Country(models.Model): country_name = models.CharField(max_length=100, verbose_name='\u0421\u0442\u0440\u0430\u043d\u0430') def __str__(self): return self.country_name class Meta: verbose_name = '\u0421\u0442\u0440\u0430\u043d\u0430' verbose_name_plural = '\u0421\u0442\u0440\u0430\u043d\u044b' class FoodType(models.Model): type = models.CharField(max_length=100, verbose_name=\"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\") def __str__(self): return self.type class Meta: verbose_name = \"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\" verbose_name_plural = \"\u0422\u0438\u043f\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f\"","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:"},{"location":"lab2/models/#_3","text":"\u0411\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0430 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0430\u0442\u044b (\u0447\u0442\u043e\u0431\u044b \u0442\u0443\u0440\u0438\u0441\u0442 \u043c\u043e\u0433 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u0443\u044e), \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f, \u0442\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0430\u043d\u0430, \u0433\u043e\u0440\u043e\u0434, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. class Tour(models.Model): name = models.CharField(max_length=200, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430') country = models.ManyToManyField(Country, verbose_name='\u0421\u0442\u0440\u0430\u043d\u0430') city = models.CharField(max_length=200, verbose_name='\u0413\u043e\u0440\u043e\u0434') available_dates = fields.ArrayField(models.DateField(), verbose_name='\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u0430\u0442\u044b', default=list) duration = models.IntegerField(verbose_name='\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c') tour_agency = models.CharField(max_length=100, verbose_name=\"\u0422\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e\") food_type = models.ManyToManyField(FoodType, verbose_name=\"\u0422\u0438\u043f \u043f\u0438\u0442\u0430\u043d\u0438\u044f\") hotel_category = fields.ArrayField( models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)]), verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', default=list) description = models.CharField(max_length=1000, verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') def __str__(self): return self.name class Meta: verbose_name = '\u0422\u0443\u0440' verbose_name_plural = '\u0422\u0443\u0440\u044b'","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0430"},{"location":"lab2/models/#_4","text":"\u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0449\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0445\u0440\u0430\u043d\u044f\u0449\u0430\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: class TourBooking(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440') tourist = models.ForeignKey(Tourist, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440\u0438\u0441\u0442') selected_date = models.DateField(verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430') selected_category = models.IntegerField(verbose_name='\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043e\u0442\u0435\u043b\u044f', validators=[MinValueValidator(1), MaxValueValidator(5)]) persons_number = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0445') children_number = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0442\u0435\u0439') rooms_number = models.IntegerField( validators=[MinValueValidator(1), MaxValueValidator(10)], verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432') STATUSES = ( ('W', \"\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f\"), ('B', '\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d'), ('C', '\u041e\u0442\u043a\u0430\u0437\u0430\u043d\u043e'), ('D', '\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d') ) status = models.CharField(choices=STATUSES, max_length=100, verbose_name='\u0421\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f') def __str__(self): return self.tour.name class Meta: verbose_name = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435' verbose_name_plural = '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f' \u0422\u0430\u043a\u0436\u0435 \u0443 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u0435 \"\u0441\u0442\u0430\u0442\u0443\u0441\", \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.","title":"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"lab2/models/#_5","text":"\u0411\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u0443\u0440\u0438\u0441\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0435\u0433\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u044f\u0445: class Tourist(AbstractUser): tours = models.ManyToManyField(Tour, through='TourBooking', verbose_name='\u0422\u0443\u0440\u044b', related_name='tourists', blank=True)","title":"\u0422\u0443\u0440\u0438\u0441\u0442"},{"location":"lab2/models/#_6","text":"\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0437\u044b\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435 \u0438 \u0435\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438: class Review(models.Model): tour = models.ForeignKey(Tour, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440') tourist = models.ForeignKey(Tourist, on_delete=models.CASCADE, verbose_name='\u0422\u0443\u0440\u0438\u0441\u0442') text = models.CharField(max_length=1000, verbose_name='\u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430') rating = models.IntegerField(choices=[(i, str(i)) for i in range(1, 11)], verbose_name='\u041e\u0446\u0435\u043d\u043a\u0430') booking = models.ForeignKey(TourBooking, on_delete=models.CASCADE, verbose_name=\"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\") class Meta: verbose_name = '\u041e\u0442\u0437\u044b\u0432' verbose_name_plural = '\u041e\u0442\u0437\u044b\u0432\u044b'","title":"\u041e\u0442\u0437\u044b\u0432\u044b"},{"location":"lab2/result/","text":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab2/result/#_1","text":"","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0438\u0434 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:"},{"location":"lab2/view/","text":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0441\u0430\u0439\u0442\u0430. \u0412\u0445\u043e\u0434 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e \u043c\u043d\u043e\u0433\u043e\u043c \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 django class TouristLoginView(LoginView): template_name = 'registration/login.html' class TouristLogoutView(LogoutView): template_name = 'registration/logout.html' def register(request): if request.method == 'POST': form = TouristRegistrationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('account') else: form = TouristRegistrationForm() return render(request, 'registration/register.html', {'form': form}) \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0445 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c @login_required def account(request): bookings = TourBooking.objects.filter(tourist=request.user) return render(request, 'registration/account.html', {'bookings': bookings}) \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432: def delete_booking(request, booking_id): booking = TourBooking.objects.get(pk=booking_id) if request.method == 'POST': booking.delete() return redirect('account') return redirect('account') \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0442\u0443\u0440\u043e\u0432 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f def tour_list(request): tours = Tour.objects.all() return render(request, 'tour_list.html', {'tours': tours}) \u0414\u0435\u0442\u0430\u043b\u0438 \u0442\u0443\u0440\u0430 \u0422\u0430\u043a\u0436\u0435 \u0442\u0443\u0440\u0438\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0443\u0440\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 def tour_detail(request, tour_id): tour = get_object_or_404(Tour, id=tour_id) reviews = Review.objects.filter(tour=tour) country = Country.objects.filter(tour=tour)[0] return render(request, 'tour_detail.html', {'tour': tour, 'reviews': reviews, 'country': country}) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u0443\u0440\u043e\u0432 \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043d\u044b\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c, \u0433\u0434\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b def tour_table(request): country_form = CountrySelectionForm(request.GET) if country_form.is_valid(): country = country_form.cleaned_data['country'] tours = Tour.objects.filter(country=country) completed_bookings = TourBooking.objects.filter(Q(tour__in=tours), status=\"D\") else: completed_bookings = TourBooking.objects.filter(status=\"D\") return render(request, 'tour_table.html', {'bookings': completed_bookings, 'country_form': country_form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab2/view/#_1","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0441\u0430\u0439\u0442\u0430.","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b"},{"location":"lab2/view/#_2","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e \u043c\u043d\u043e\u0433\u043e\u043c \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 django class TouristLoginView(LoginView): template_name = 'registration/login.html' class TouristLogoutView(LogoutView): template_name = 'registration/logout.html' def register(request): if request.method == 'POST': form = TouristRegistrationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('account') else: form = TouristRegistrationForm() return render(request, 'registration/register.html', {'form': form})","title":"\u0412\u0445\u043e\u0434 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"lab2/view/#_3","text":"\u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0445 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c @login_required def account(request): bookings = TourBooking.objects.filter(tourist=request.user) return render(request, 'registration/account.html', {'bookings': bookings}) \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432: def delete_booking(request, booking_id): booking = TourBooking.objects.get(pk=booking_id) if request.method == 'POST': booking.delete() return redirect('account') return redirect('account')","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab2/view/#_4","text":"\u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0442\u0443\u0440\u043e\u0432 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f def tour_list(request): tours = Tour.objects.all() return render(request, 'tour_list.html', {'tours': tours})","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432"},{"location":"lab2/view/#_5","text":"\u0422\u0430\u043a\u0436\u0435 \u0442\u0443\u0440\u0438\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0443\u0440\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 def tour_detail(request, tour_id): tour = get_object_or_404(Tour, id=tour_id) reviews = Review.objects.filter(tour=tour) country = Country.objects.filter(tour=tour)[0] return render(request, 'tour_detail.html', {'tour': tour, 'reviews': reviews, 'country': country})","title":"\u0414\u0435\u0442\u0430\u043b\u0438 \u0442\u0443\u0440\u0430"},{"location":"lab2/view/#_6","text":"\u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043d\u044b\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c, \u0433\u0434\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b def tour_table(request): country_form = CountrySelectionForm(request.GET) if country_form.is_valid(): country = country_form.cleaned_data['country'] tours = Tour.objects.filter(country=country) completed_bookings = TourBooking.objects.filter(Q(tour__in=tours), status=\"D\") else: completed_bookings = TourBooking.objects.filter(status=\"D\") return render(request, 'tour_table.html', {'bookings': completed_bookings, 'country_form': country_form})","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u0443\u0440\u043e\u0432"},{"location":"lab3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\u043c\u0438 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043b\u0438\u0446\u0430\u043c\u0438 \u0438 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438. \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b. \u0414\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0441\u0442\u0440\u0430\u0445\u0443\u0435\u043c\u044b\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438: \u0424\u0418\u041e, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0440\u0438\u0441\u043a\u0430 (\u043f\u0435\u0440\u0432\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f, \u0432\u044b\u0441\u0448\u0430\u044f \u0438 \u0442.\u043f.). \u041e \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043a\u043e\u0434, \u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u0434\u0440\u0435\u0441, \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b (\u043d\u043e\u043c\u0435\u0440 \u0431\u0430\u043d\u043a\u0430), \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f (\u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0435, \u0443\u0447\u0435\u0431\u043d\u043e\u0435 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.). \u0412 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0441\u0440\u043e\u043a \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 (\u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430), \u0441\u0443\u043c\u043c\u0430 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c. \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c \u0430\u0433\u0435\u043d\u0442\u0435, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440 (\u0424\u0418\u041e, \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435). \u041a\u0430\u0436\u0434\u044b\u0439 \u0430\u0433\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432. \u0421 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043b\u0438\u0446\u043e\u043c \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0438\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c. \u041f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0435\u0433\u043e \u0434\u0430\u0442\u0435, \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b. \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\u0445.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab3/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\u043c\u0438 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043b\u0438\u0446\u0430\u043c\u0438 \u0438 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438. \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b. \u0414\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0441\u0442\u0440\u0430\u0445\u0443\u0435\u043c\u044b\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438: \u0424\u0418\u041e, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0440\u0438\u0441\u043a\u0430 (\u043f\u0435\u0440\u0432\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f, \u0432\u044b\u0441\u0448\u0430\u044f \u0438 \u0442.\u043f.). \u041e \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043a\u043e\u0434, \u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u0434\u0440\u0435\u0441, \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b (\u043d\u043e\u043c\u0435\u0440 \u0431\u0430\u043d\u043a\u0430), \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f (\u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0435, \u0443\u0447\u0435\u0431\u043d\u043e\u0435 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.). \u0412 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0441\u0440\u043e\u043a \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 (\u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430), \u0441\u0443\u043c\u043c\u0430 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c. \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u0430\u043a\u0436\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c \u0430\u0433\u0435\u043d\u0442\u0435, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440 (\u0424\u0418\u041e, \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435). \u041a\u0430\u0436\u0434\u044b\u0439 \u0430\u0433\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432. \u0421 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043b\u0438\u0446\u043e\u043c \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0438\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c. \u041f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0435\u0433\u043e \u0434\u0430\u0442\u0435, \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b. \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\u0445.","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442:"},{"location":"lab3/agents/","text":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class AgentSerializer(serializers.ModelSerializer): class Meta: model = Agent fields = \"__all__\" class AgentListSerializer(serializers.ModelSerializer): class Meta: model = Agent fields = [\"username\"] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class AgentListAPIView(generics.ListAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \"\"\" queryset = Agent.objects.all() serializer_class = AgentListSerializer class AgentDeleteAPIView(generics.DestroyAPIView): \"\"\" \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0435\u043d\u0442\u0430 \"\"\" queryset = Agent.objects.all() serializer_class = AgentSerializer lookup_field = \"id\" class ActiveAgentsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \"\"\" serializer_class = AgentListSerializer def get_queryset(self): return Agent.objects.filter(contract__start_date__lte=timezone.now(), contract__end_date__gte=timezone.now()) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/agents/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 POST \"/auth/users/\"- \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 POST \"/auth/token/login/\" - \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 GET \"/auth/users/me/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c \u0430\u0433\u0435\u043d\u0442\u0435 PATCH \"/auth/users/me/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0435 DELETE \"/agents/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 GET \"/agents/active/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432","title":"Agents"},{"location":"lab3/agents/#_1","text":"","title":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u044b:"},{"location":"lab3/agents/#_2","text":"class AgentSerializer(serializers.ModelSerializer): class Meta: model = Agent fields = \"__all__\" class AgentListSerializer(serializers.ModelSerializer): class Meta: model = Agent fields = [\"username\"]","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/agents/#_3","text":"class AgentListAPIView(generics.ListAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \"\"\" queryset = Agent.objects.all() serializer_class = AgentListSerializer class AgentDeleteAPIView(generics.DestroyAPIView): \"\"\" \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0435\u043d\u0442\u0430 \"\"\" queryset = Agent.objects.all() serializer_class = AgentSerializer lookup_field = \"id\" class ActiveAgentsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \"\"\" serializer_class = AgentListSerializer def get_queryset(self): return Agent.objects.filter(contract__start_date__lte=timezone.now(), contract__end_date__gte=timezone.now())","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/agents/#_4","text":"GET \"/agents/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 POST \"/auth/users/\"- \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 POST \"/auth/token/login/\" - \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 GET \"/auth/users/me/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c \u0430\u0433\u0435\u043d\u0442\u0435 PATCH \"/auth/users/me/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0435 DELETE \"/agents/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0442\u0430 GET \"/agents/active/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/claims/","text":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class InsuranceClaimSerializer(serializers.ModelSerializer): class Meta: model = InsuranceClaim fields = \"__all__\" class InsuranceClaimListSerializer(serializers.ModelSerializer): class Meta: model = InsuranceClaim fields = ['insurance_contract', 'decision'] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class InsuranceClaimListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c \"\"\" queryset = InsuranceClaim.objects.all() def get_serializer_class(self): if self.request.method == \"GET\": return InsuranceClaimListSerializer elif self.request.method == \"POST\": return InsuranceClaimSerializer class InsuranceClaimUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c\u0443 \u0441\u043b\u0443\u0447\u0430\u044e \"\"\" queryset = InsuranceClaim.objects.all() serializer_class = InsuranceClaimSerializer lookup_field = \"id\" class EnterpriseInsuranceClaimsListView(generics.ListAPIView): \"\"\" \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" serializer_class = InsuranceClaimSerializer def get_queryset(self): enterprise_id = self.kwargs['id'] return InsuranceClaim.objects.filter(insurance_contract__enterprise_id=enterprise_id) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/insurance_claims/ - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 POST \"/insurance_claims/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/insurance_claims/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u0435 PUT/PATCH \"/insurance_claims/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 DELETE \"/insurance_claims/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/insurance_claims/enterprise/id\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","title":"Claims"},{"location":"lab3/claims/#_1","text":"","title":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b:"},{"location":"lab3/claims/#_2","text":"class InsuranceClaimSerializer(serializers.ModelSerializer): class Meta: model = InsuranceClaim fields = \"__all__\" class InsuranceClaimListSerializer(serializers.ModelSerializer): class Meta: model = InsuranceClaim fields = ['insurance_contract', 'decision']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/claims/#_3","text":"class InsuranceClaimListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c \"\"\" queryset = InsuranceClaim.objects.all() def get_serializer_class(self): if self.request.method == \"GET\": return InsuranceClaimListSerializer elif self.request.method == \"POST\": return InsuranceClaimSerializer class InsuranceClaimUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u043c\u0443 \u0441\u043b\u0443\u0447\u0430\u044e \"\"\" queryset = InsuranceClaim.objects.all() serializer_class = InsuranceClaimSerializer lookup_field = \"id\" class EnterpriseInsuranceClaimsListView(generics.ListAPIView): \"\"\" \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" serializer_class = InsuranceClaimSerializer def get_queryset(self): enterprise_id = self.kwargs['id'] return InsuranceClaim.objects.filter(insurance_contract__enterprise_id=enterprise_id)","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/claims/#_4","text":"GET \"/insurance_claims/ - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 POST \"/insurance_claims/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/insurance_claims/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u0435 PUT/PATCH \"/insurance_claims/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 DELETE \"/insurance_claims/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/insurance_claims/enterprise/id\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/client/","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class ClientListSerializer(serializers.ModelSerializer): class Meta: model = Client fields = [\"name\"] class ClientSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class ClientListCreateView(generics.ListCreateAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (GET \u0437\u0430\u043f\u0440\u043e\u0441), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (POST \u0437\u0430\u043f\u0440\u043e\u0441) \"\"\" queryset = Client.objects.all() def get_serializer_class(self): if self.request.method == 'GET': return ClientListSerializer elif self.request.method == 'POST': return ClientSerializer class ClientRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438: \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = Client.objects.all() serializer_class = ClientSerializer lookup_field = \"id\" \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/clients/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 POST \"/clients/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 GET \"/clients/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0435 PUT/PATCH \"/clients/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0435 DELETE \"/clients/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"Client"},{"location":"lab3/client/#_1","text":"","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b:"},{"location":"lab3/client/#_2","text":"class ClientListSerializer(serializers.ModelSerializer): class Meta: model = Client fields = [\"name\"] class ClientSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/client/#_3","text":"class ClientListCreateView(generics.ListCreateAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (GET \u0437\u0430\u043f\u0440\u043e\u0441), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (POST \u0437\u0430\u043f\u0440\u043e\u0441) \"\"\" queryset = Client.objects.all() def get_serializer_class(self): if self.request.method == 'GET': return ClientListSerializer elif self.request.method == 'POST': return ClientSerializer class ClientRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438: \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = Client.objects.all() serializer_class = ClientSerializer lookup_field = \"id\"","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/client/#_4","text":"GET \"/clients/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 POST \"/clients/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 GET \"/clients/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0435 PUT/PATCH \"/clients/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0435 DELETE \"/clients/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/contracts/","text":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class InsuranceContractSerializer(serializers.ModelSerializer): class Meta: model = InsuranceContract fields = \"__all__\" class InsuranceContractListSerializer(serializers.ModelSerializer): class Meta: model = InsuranceContract fields = ['agent', 'enterprise'] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class InsuranceContractListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \"\"\" queryset = InsuranceContract.objects.all() def get_serializer_class(self): if self.request.method == \"GET\": return InsuranceContractListSerializer elif self.request.method == \"POST\": return InsuranceContractSerializer class InsuranceContractUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u043c \"\"\" queryset = InsuranceContract.objects.all() serializer_class = InsuranceContractSerializer lookup_field = \"id\" class EnterpriseContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): enterprise_id = self.kwargs['id'] return InsuranceContract.objects.filter(enterprise_id=enterprise_id) class AgentContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c \"\"\" serializer_class = AgentListSerializer def get_queryset(self): agent_id = self.kwargs['id'] return InsuranceContract.objects.filter(agent_id=agent_id) class SpecializationContractsListView(generics.ListAPIView): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f\u043c\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): specialization_id = self.kwargs['id'] return InsuranceContract.objects.filter(enterprise__specialization_id=specialization_id) class ClientContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): client_id = self.kwargs['id'] return InsuranceContract.objects.filter(clients__id=client_id) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/contracts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 POST \"/contracts/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/contracts/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 PUT/PATCH \"/contracts/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 DELETE \"/contracts/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/contracts/enterprise/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 GET \"/contracts/agent/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c GET \"/contracts/specialization/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 GET \"/contracts/client/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442","title":"Contracts"},{"location":"lab3/contracts/#_1","text":"","title":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b:"},{"location":"lab3/contracts/#_2","text":"class InsuranceContractSerializer(serializers.ModelSerializer): class Meta: model = InsuranceContract fields = \"__all__\" class InsuranceContractListSerializer(serializers.ModelSerializer): class Meta: model = InsuranceContract fields = ['agent', 'enterprise']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/contracts/#_3","text":"class InsuranceContractListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \"\"\" queryset = InsuranceContract.objects.all() def get_serializer_class(self): if self.request.method == \"GET\": return InsuranceContractListSerializer elif self.request.method == \"POST\": return InsuranceContractSerializer class InsuranceContractUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u043c \"\"\" queryset = InsuranceContract.objects.all() serializer_class = InsuranceContractSerializer lookup_field = \"id\" class EnterpriseContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): enterprise_id = self.kwargs['id'] return InsuranceContract.objects.filter(enterprise_id=enterprise_id) class AgentContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c \"\"\" serializer_class = AgentListSerializer def get_queryset(self): agent_id = self.kwargs['id'] return InsuranceContract.objects.filter(agent_id=agent_id) class SpecializationContractsListView(generics.ListAPIView): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f\u043c\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): specialization_id = self.kwargs['id'] return InsuranceContract.objects.filter(enterprise__specialization_id=specialization_id) class ClientContractsListView(generics.ListAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"\"\" serializer_class = InsuranceContractSerializer def get_queryset(self): client_id = self.kwargs['id'] return InsuranceContract.objects.filter(clients__id=client_id)","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/contracts/#_4","text":"GET \"/contracts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 POST \"/contracts/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/contracts/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 PUT/PATCH \"/contracts/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 DELETE \"/contracts/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/contracts/enterprise/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 GET \"/contracts/agent/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u043c GET \"/contracts/specialization/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 GET \"/contracts/client/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/employee_contracts/","text":"\u0422\u0440\u0443\u0434\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class EmploymentContractSerializer(serializers.ModelSerializer): class Meta: model = EmploymentContract fields = \"__all__\" \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class EmployeeContractListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = EmploymentContract.objects.all() serializer_class = EmploymentContractSerializer class EmployeeContractUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = EmploymentContract.objects.all() serializer_class = EmploymentContractSerializer lookup_field = \"id\" \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/employee_contracts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 POST \"/clients/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/clients/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 PUT/PATCH \"/clients/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 DELETE \"/clients/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430","title":"Employee_contracts"},{"location":"lab3/employee_contracts/#_1","text":"","title":"\u0422\u0440\u0443\u0434\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438:"},{"location":"lab3/employee_contracts/#_2","text":"class EmploymentContractSerializer(serializers.ModelSerializer): class Meta: model = EmploymentContract fields = \"__all__\"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/employee_contracts/#_3","text":"class EmployeeContractListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043f\u0438\u0441\u043a\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = EmploymentContract.objects.all() serializer_class = EmploymentContractSerializer class EmployeeContractUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = EmploymentContract.objects.all() serializer_class = EmploymentContractSerializer lookup_field = \"id\"","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/employee_contracts/#_4","text":"GET \"/employee_contracts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u0432 POST \"/clients/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 GET \"/clients/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 PUT/PATCH \"/clients/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0435 DELETE \"/clients/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/enterprises/","text":"\u041a\u043e\u043c\u043f\u0430\u043d\u0438\u0438: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class EnterpriseSerializer(serializers.ModelSerializer): class Meta: model = Enterprise fields = \"__all__\" class EnterpriseListSerializer(serializers.ModelSerializer): class Meta: model = Enterprise fields = [\"short_name\"] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class EnterpriseListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" queryset = Enterprise.objects.all() def get_serializer_class(self): if self.request.method == 'GET': return EnterpriseListSerializer elif self.request.method == 'POST': return EnterpriseSerializer class EnterpriseRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439: \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = Enterprise.objects.all() lookup_field = \"id\" serializer_class = EnterpriseSerializer \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/enterprises/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 POST \"/enterprises/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 GET \"/enterprises/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 PUT/PATCH \"/enterprises/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 DELETE \"/enterprises/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","title":"Enterprises"},{"location":"lab3/enterprises/#_1","text":"","title":"\u041a\u043e\u043c\u043f\u0430\u043d\u0438\u0438:"},{"location":"lab3/enterprises/#_2","text":"class EnterpriseSerializer(serializers.ModelSerializer): class Meta: model = Enterprise fields = \"__all__\" class EnterpriseListSerializer(serializers.ModelSerializer): class Meta: model = Enterprise fields = [\"short_name\"]","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/enterprises/#_3","text":"class EnterpriseListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" queryset = Enterprise.objects.all() def get_serializer_class(self): if self.request.method == 'GET': return EnterpriseListSerializer elif self.request.method == 'POST': return EnterpriseSerializer class EnterpriseRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439: \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \"\"\" queryset = Enterprise.objects.all() lookup_field = \"id\" serializer_class = EnterpriseSerializer","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/enterprises/#_4","text":"GET \"/enterprises/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 POST \"/enterprises/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 GET \"/enterprises/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 PUT/PATCH \"/enterprises/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 DELETE \"/enterprises/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/models/","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u041a\u043b\u0438\u0435\u043d\u0442 class Client(models.Model): \"\"\" \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043b\u0438\u0446\u0430/\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0444\u0438\u0440\u043c\u044b \"\"\" name = models.CharField(max_length=150) age = models.IntegerField() risk_category = models.CharField(max_length=10, choices=RISK_CATEGORY_CHOICES) def __str__(self): return self.name \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 class Specialization(models.Model): \"\"\" \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" title = models.CharField(max_length=100) def __str__(self): return self.title \u041a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 class Enterprise(models.Model): \"\"\" \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" code = models.IntegerField() full_name = models.CharField(max_length=150) short_name = models.CharField(max_length=10, null=True) address = models.CharField(max_length=150, null=True) bank_details = models.IntegerField() specialization = models.ManyToManyField(\"Specialization\") def __str__(self): return self.short_name \u0422\u0440\u0443\u0434\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b class EmploymentContract(models.Model): \"\"\" \u0422\u0440\u0443\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0430\u0433\u0435\u043d\u0442\u043e\u043c \"\"\" start_date = models.DateField() end_date = models.DateField(null=True) \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u044b class Agent(AbstractUser): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0430\u0433\u0435\u043d\u0442 \"\"\" passport_number = models.IntegerField() phone_number = models.IntegerField() contract = models.ForeignKey(\"EmploymentContract\", on_delete=models.CASCADE, null=True) groups = models.ManyToManyField('auth.Group', related_name='insurance_agents', blank=True) user_permissions = models.ManyToManyField('auth.Permission', related_name='insurance_agents', blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone_number', 'contract', 'passport_number'] \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b class Payout(models.Model): \"\"\" \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u0441 \u0441\u0443\u043c\u043c\u0430\u043c\u0438 \"\"\" EVENT_CATEGORY_CHOICES = [ ('light', '\u041b\u0435\u0433\u043a\u043e\u0435 \u043f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435'), ('middle', '\u041f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0442\u044f\u0436\u0435\u0441\u0442\u0438'), ('highest', '\u041f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0442\u044f\u0436\u0435\u0441\u0442\u0438'), ] risk_category = models.CharField(max_length=10, choices=RISK_CATEGORY_CHOICES) sum = models.IntegerField() insured_event = models.CharField(max_length=10, choices=EVENT_CATEGORY_CHOICES) def __str__(self): return f\"{self.risk_category}, sum - {self.sum}\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b class InsuranceContract(models.Model): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \"\"\" agent = models.ForeignKey(\"Agent\", on_delete=models.CASCADE) signing_date = models.DateField() start_date = models.DateField() end_date = models.DateField() TYPE_CHOICES = [ (\"ind\", \"\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439\"), (\"col\", \"\u041a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439\") ] type = models.CharField(max_length=10, choices=TYPE_CHOICES) available_payouts = models.ManyToManyField(\"Payout\") enterprise = models.ForeignKey(\"Enterprise\", on_delete=models.CASCADE, null=True) participating_persons = models.ManyToManyField(\"Client\") \u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c class InsuranceClaim(models.Model): insurance_contract = models.ForeignKey(\"InsuranceContract\", on_delete=models.CASCADE) date_occured = models.DateField() reason = models.CharField(max_length=200) decision = models.BooleanField() payout_amount = models.IntegerField(null=True)","title":"Models"},{"location":"lab3/models/#_1","text":"","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:"},{"location":"lab3/models/#_2","text":"class Client(models.Model): \"\"\" \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043b\u0438\u0446\u0430/\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0444\u0438\u0440\u043c\u044b \"\"\" name = models.CharField(max_length=150) age = models.IntegerField() risk_category = models.CharField(max_length=10, choices=RISK_CATEGORY_CHOICES) def __str__(self): return self.name","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab3/models/#_3","text":"class Specialization(models.Model): \"\"\" \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" title = models.CharField(max_length=100) def __str__(self): return self.title","title":"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"lab3/models/#_4","text":"class Enterprise(models.Model): \"\"\" \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"\"\" code = models.IntegerField() full_name = models.CharField(max_length=150) short_name = models.CharField(max_length=10, null=True) address = models.CharField(max_length=150, null=True) bank_details = models.IntegerField() specialization = models.ManyToManyField(\"Specialization\") def __str__(self): return self.short_name","title":"\u041a\u043e\u043c\u043f\u0430\u043d\u0438\u0438"},{"location":"lab3/models/#_5","text":"class EmploymentContract(models.Model): \"\"\" \u0422\u0440\u0443\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0430\u0433\u0435\u043d\u0442\u043e\u043c \"\"\" start_date = models.DateField() end_date = models.DateField(null=True)","title":"\u0422\u0440\u0443\u0434\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b"},{"location":"lab3/models/#_6","text":"class Agent(AbstractUser): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0430\u0433\u0435\u043d\u0442 \"\"\" passport_number = models.IntegerField() phone_number = models.IntegerField() contract = models.ForeignKey(\"EmploymentContract\", on_delete=models.CASCADE, null=True) groups = models.ManyToManyField('auth.Group', related_name='insurance_agents', blank=True) user_permissions = models.ManyToManyField('auth.Permission', related_name='insurance_agents', blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone_number', 'contract', 'passport_number']","title":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u044b"},{"location":"lab3/models/#_7","text":"class Payout(models.Model): \"\"\" \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u0441 \u0441\u0443\u043c\u043c\u0430\u043c\u0438 \"\"\" EVENT_CATEGORY_CHOICES = [ ('light', '\u041b\u0435\u0433\u043a\u043e\u0435 \u043f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435'), ('middle', '\u041f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0442\u044f\u0436\u0435\u0441\u0442\u0438'), ('highest', '\u041f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0442\u044f\u0436\u0435\u0441\u0442\u0438'), ] risk_category = models.CharField(max_length=10, choices=RISK_CATEGORY_CHOICES) sum = models.IntegerField() insured_event = models.CharField(max_length=10, choices=EVENT_CATEGORY_CHOICES) def __str__(self): return f\"{self.risk_category}, sum - {self.sum}\"","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b"},{"location":"lab3/models/#_8","text":"class InsuranceContract(models.Model): \"\"\" \u0421\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \"\"\" agent = models.ForeignKey(\"Agent\", on_delete=models.CASCADE) signing_date = models.DateField() start_date = models.DateField() end_date = models.DateField() TYPE_CHOICES = [ (\"ind\", \"\u0418\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0439\"), (\"col\", \"\u041a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439\") ] type = models.CharField(max_length=10, choices=TYPE_CHOICES) available_payouts = models.ManyToManyField(\"Payout\") enterprise = models.ForeignKey(\"Enterprise\", on_delete=models.CASCADE, null=True) participating_persons = models.ManyToManyField(\"Client\")","title":"\u0421\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b"},{"location":"lab3/models/#_9","text":"class InsuranceClaim(models.Model): insurance_contract = models.ForeignKey(\"InsuranceContract\", on_delete=models.CASCADE) date_occured = models.DateField() reason = models.CharField(max_length=200) decision = models.BooleanField() payout_amount = models.IntegerField(null=True)","title":"\u0412\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c"},{"location":"lab3/payouts/","text":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class PayoutSerializer(serializers.ModelSerializer): class Meta: model = Payout fields = '__all__' class PayoutListSerializer(serializers.ModelSerializer): class Meta: model = Payout fields = ['risk_category', 'insured_event'] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class PayoutListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \"\"\" queryset = Payout.objects.all() def get_serializer_class(self): if self.request.method ==\"GET\": return PayoutListSerializer elif self.request.method == \"POST\": return PayoutSerializer class PayoutUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0435\u0451 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \"\"\" queryset = Payout.objects.all() serializer_class = PayoutSerializer lookup_field = \"id\" \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/payouts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 POST \"/payouts/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/payouts/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u0435 PUT/PATCH \"/payouts/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 DELETE \"/payouts/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b","title":"Payouts"},{"location":"lab3/payouts/#_1","text":"","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c:"},{"location":"lab3/payouts/#_2","text":"class PayoutSerializer(serializers.ModelSerializer): class Meta: model = Payout fields = '__all__' class PayoutListSerializer(serializers.ModelSerializer): class Meta: model = Payout fields = ['risk_category', 'insured_event']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/payouts/#_3","text":"class PayoutListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0421\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \"\"\" queryset = Payout.objects.all() def get_serializer_class(self): if self.request.method ==\"GET\": return PayoutListSerializer elif self.request.method == \"POST\": return PayoutSerializer class PayoutUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): \"\"\" \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0435\u0451 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \"\"\" queryset = Payout.objects.all() serializer_class = PayoutSerializer lookup_field = \"id\"","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/payouts/#_4","text":"GET \"/payouts/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u044b\u043f\u043b\u0430\u0442 POST \"/payouts/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u044b GET \"/payouts/id/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u043f\u043b\u0430\u0442\u0435 PUT/PATCH \"/payouts/id/\" - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u044b\u043f\u043b\u0430\u0442\u0435 DELETE \"/payouts/id/\" - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"lab3/specializations/","text":"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440: class SpecializationSerializer(serializers.ModelSerializer): class Meta: model = Specialization fields = \"__all__\" \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b: class SpecializationListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" queryset = Specialization.objects.all() serializer_class = SpecializationSerializer \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: GET \"/specializations/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 POST \"/specializations/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","title":"Specializations"},{"location":"lab3/specializations/#_1","text":"","title":"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:"},{"location":"lab3/specializations/#_2","text":"class SpecializationSerializer(serializers.ModelSerializer): class Meta: model = Specialization fields = \"__all__\"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440:"},{"location":"lab3/specializations/#_3","text":"class SpecializationListCreateAPIView(generics.ListCreateAPIView): \"\"\" \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \"\"\" queryset = Specialization.objects.all() serializer_class = SpecializationSerializer","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b:"},{"location":"lab3/specializations/#_4","text":"GET \"/specializations/\" - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 POST \"/specializations/\"- \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"}]}